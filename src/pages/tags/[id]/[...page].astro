---
import type { GetStaticPathsOptions, Page } from 'astro';
import { type CollectionEntry, getCollection } from 'astro:content';
import Pagination from '../../../components/Pagination.astro';
import PostPreview from '../../../components/PostPreview.astro';
import Subscribe from '../../../components/Subscribe.astro';
import siteConfig from '../../../data/site-config';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { getAllTags, getPostsByTag, sortItemsByDateDesc } from '../../../utils/data-utils';

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
    const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const tags = getAllTags(posts);

    return tags.flatMap((tag) => {
        const filteredPosts = getPostsByTag(posts, tag.id);
        return paginate(filteredPosts, {
            params: { id: tag.id },
            pageSize: siteConfig.postsPerPage || 4
        });
    });
}

type Props = { page: Page<CollectionEntry<'blog'>> };

// En modo servidor, obtener los datos dinámicamente
let page: Page<CollectionEntry<'blog'>> | undefined;
let blog: CollectionEntry<'blog'>[] = [];
let currentTag: { id: string; name: string } | undefined;

if (Astro.props.page) {
    // Modo estático
    page = Astro.props.page;
    blog = page.data;
    const params = Astro.params;
    const allPosts = await getCollection('blog');
    const allTags = getAllTags(allPosts);
    currentTag = allTags.find((tag) => tag.id === params.id);
} else {
    // Modo servidor - obtener datos dinámicamente
    const allPosts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const allTags = getAllTags(allPosts);
    const tagId = Astro.params.id;
    currentTag = allTags.find((tag) => tag.id === tagId);

    if (!currentTag) {
        return Astro.redirect('/404');
    }

    const filteredPosts = getPostsByTag(allPosts, tagId);
    const currentPage = parseInt(Astro.params.page || '1');
    const pageSize = siteConfig.postsPerPage || 4;
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;

    blog = filteredPosts.slice(startIndex, endIndex);

    // Crear objeto page para paginación
    page = {
        data: blog,
        url: Astro.url,
        currentPage,
        lastPage: Math.ceil(filteredPosts.length / pageSize),
        total: filteredPosts.length,
        size: pageSize,
        start: startIndex + 1,
        end: Math.min(endIndex, filteredPosts.length),
        prev: currentPage > 1 ? currentPage - 1 : undefined,
        next: currentPage < Math.ceil(filteredPosts.length / pageSize) ? currentPage + 1 : undefined
    } as unknown as Page<CollectionEntry<'blog'>>;
}

// Validar que page existe
if (!page) {
    return Astro.redirect('/404');
}
---

<BaseLayout
    title={`Publicaciones Etiquetadas ${currentTag?.name}`}
    description={`Explora una colección curada de publicaciones de blog bajo ${currentTag?.name}`}
    image={{ src: '/dante-preview.jpg', alt: 'La vista previa del sitio' }}
    showHeader={false}
>
    <h1 class="mb-12 text-2xl leading-tight font-serif italic sm:mb-16 sm:text-4xl">Publicaciones Etiquetadas "{currentTag?.name}"</h1>
    {blog.map((post) => <PostPreview post={post} class="mb-10 sm:mb-12" />)}
    <Pagination page={page} class="my-16 sm:my-24" />
    <Subscribe class="my-16 sm:my-24" />
</BaseLayout>
