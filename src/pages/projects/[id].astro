---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import ProjectPreview from '../../components/ProjectPreview.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';

export async function getStaticPaths() {
    const projects = (await getCollection('projects')).sort(sortItemsByDateDesc);
    const projectCount = projects.length;
    return projects.map((project, index) => ({
        params: { id: project.id },
        props: {
            project,
            prevProject: index + 1 !== projectCount ? projects[index + 1] : null,
            nextProject: index !== 0 ? projects[index - 1] : null
        }
    }));
}

type Props = {
    project: CollectionEntry<'projects'>;
    prevProject: CollectionEntry<'projects'>;
    nextProject: CollectionEntry<'projects'>;
};

// Obtener datos del proyecto
let project: CollectionEntry<'projects'> | undefined;
let prevProject: CollectionEntry<'projects'> | null = null;
let nextProject: CollectionEntry<'projects'> | null = null;

// Si estamos en modo estático, usar props
if (Astro.props.project) {
    project = Astro.props.project;
    prevProject = Astro.props.prevProject;
    nextProject = Astro.props.nextProject;
} else {
    // Si estamos en modo servidor, obtener datos dinámicamente
    const { id } = Astro.params;
    if (id) {
        try {
            const projects = (await getCollection('projects')).sort(sortItemsByDateDesc);
            const projectIndex = projects.findIndex((p) => p.id === id);

            if (projectIndex !== -1) {
                project = projects[projectIndex];
                prevProject = projectIndex + 1 !== projects.length ? projects[projectIndex + 1] : null;
                nextProject = projectIndex !== 0 ? projects[projectIndex - 1] : null;
            }
        } catch (error) {
            console.error('Error loading project:', error);
        }
    }
}

// Si no se encontró el proyecto, redirigir a 404
if (!project) {
    return Astro.redirect('/404');
}

const { title, description, seo } = project.data;
const { Content } = await render(project);
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? description} image={seo?.image} pageType="article" showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
        </header>
        <div class="max-w-none prose sm:prose-lg">
            <Content />
        </div>
    </article>
    {
        (prevProject || nextProject) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">Ver Siguiente</h2>
                {nextProject && <ProjectPreview project={nextProject} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevProject && <ProjectPreview project={prevProject} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
</BaseLayout>
